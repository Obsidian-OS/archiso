#!/usr/bin/env python3
import argparse
def checkroot():
    if os.geteuid() != 0:
      print("This script must be run as root.", file=sys.stderr)
      sys.exit(1)

def run_command(command, **kwargs):
    kwargs.setdefault("text", True)
    check = kwargs.pop("check", True)
    try:
        process = subprocess.run(
            command if isinstance(command, list) else shlex.split(command),
            check=check,
            **kwargs,
        )
        return process
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {command}", file=sys.stderr)
        print(f"Exit Code: {e.returncode}", file=sys.stderr)
        if e.stdout:
            print(f"Stdout: {e.stdout}", file=sys.stderr)
        if e.stderr:
            print(f"Stderr: {e.stderr}", file=sys.stderr)
        sys.exit(1)
    except FileNotFoundError:
        print(f"Error: Command not found for: {command}", file=sys.stderr)
        sys.exit(1)


def _get_part_path(device, part_num):
    if "nvme" in device:
        return f"{device}p{part_num}"
    else:
        return f"{device}{part_num}"


def get_current_slot_systemd():
    try:
        bootctl_output = subprocess.check_output(["bootctl", "status"], text=True)
        match = re.search(
            r"^\s*id:\s+.*obsidian-([ab])\.conf", bootctl_output, re.MULTILINE
        )
        if match:
            return match.group(1)
    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    return "unknown"


def get_current_slot():
    try:
        findmnt_output = subprocess.check_output(
            ["findmnt", "-n", "-o", "SOURCE,UUID,PARTUUID,LABEL,PARTLABEL", "/"],
            text=True,
        ).strip()
        for item in findmnt_output.split():
            if "_a" in item:
                return "a"
            elif "_b" in item:
                return "b"

    except (subprocess.CalledProcessError, FileNotFoundError):
        pass
    return "unknown"


def handle_status(args):
    logo = [
        "   ooooooooooo   ",
        " oo:::::::::::oo ",
        "o:::::::::::::::o",
        "o:::::ooooo:::::o",
        "o::::o     o::::o",
        "o::::o     o::::o",
        "o::::o     o::::o",
        "o::::o     o::::o",
        "o:::::ooooo:::::o",
        "o:::::::::::::::o",
        " oo:::::::::::oo ",
        "   ooooooooooo   ",
    ]

    info = {}
    info["Active Slot"] = get_current_slot_systemd()
    info["Current Slot"] = get_current_slot()
    info["Kernel"] = run_command(
        "uname -r", capture_output=True, text=True
    ).stdout.strip()
    info["Uptime"] = (
        run_command("uptime -p", capture_output=True, text=True)
        .stdout.strip()
        .replace("up ", "")
    )
    try:
        with open("/etc/os-release") as f:
            os_release = dict(line.strip().split("=", 1) for line in f if "=" in line)
        info["OS"] = os_release.get("PRETTY_NAME", "GNU/Linux").strip('"')
    except FileNotFoundError:
        info["OS"] = "GNU/Linux"

    info["Hostname"] = run_command(
        "hostnamectl hostname", capture_output=True, text=True
    ).stdout.strip()
    cpu_info = run_command("lscpu", capture_output=True, text=True).stdout
    cpu_model_match = re.search(r"Model name:\s+(.*)", cpu_info)
    if cpu_model_match:
        info["CPU"] = cpu_model_match.group(1).strip()

    mem_info = run_command("free -h", capture_output=True, text=True).stdout
    mem_line = mem_info.split("\n")[1]
    mem_parts = mem_line.split()
    if len(mem_parts) >= 3:
        info["Memory"] = f"{mem_parts[2]} / {mem_parts[1]}"

    max_logo_width = max(len(line) for line in logo)
    for i in range(max(len(logo), len(info))):
        logo_line = logo[i] if i < len(logo) else " " * max_logo_width
        if i < len(info):
            key, value = list(info.items())[i]
            info_line = f"\033[1m{key}\033[0m: {value}"
        else:
            info_line = ""

        print(f"\033[36m{logo_line}\033[0m  {info_line}")
    print("\n\033[1mPartition Information:\033[0m")
    run_command("lsblk -o NAME,LABEL,SIZE,MOUNTPOINT")


def handle_install(args):
    checkroot()
    device = args.device
    system_sfs = args.system_sfs or '/etc/system.sfs'
    if not os.path.exists(device):
        print(f"Error: Device '{device}' does not exist.", file=sys.stderr)
        sys.exit(1)

    if not os.path.exists(system_sfs):
        print(f"Error: System image '{system_sfs}' not found.", file=sys.stderr)
        sys.exit(1)

    print(f"WARNING: This will destroy all data on {device}.")
    confirm = input("Are you sure you want to proceed? (y/N): ")
    if confirm.lower() != "y":
        print("Installation aborted.")
        sys.exit(0)
    print("Partitioning device...")
    partition_table = """
label: gpt
,512M,U,*
,512M,U,*
,5G,L,*
,5G,L,*
,5G,L,*
,5G,L,*
,,L,*
"""
    run_command(f"sfdisk {device}", input=partition_table, text=True)
    run_command("partprobe", check=False)
    print("Waiting for device partitions to settle...")
    run_command("udevadm settle")
    part1, part2, part3, part4, part5, part6, part7 = (
        _get_part_path(device, 1),
        _get_part_path(device, 2),
        _get_part_path(device, 3),
        _get_part_path(device, 4),
        _get_part_path(device, 5),
        _get_part_path(device, 6),
        _get_part_path(device, 7),
    )

    print("Formatting partitions...")
    format_commands = [
        f"mkfs.fat -F32 -n ESP_A {part1}",
        f"mkfs.fat -F32 -n ESP_B {part2}",
        f"mkfs.ext4 -F -L root_a {part3}",
        f"mkfs.ext4 -F -L root_b {part4}",
        f"mkfs.ext4 -F -L etc_ab {part5}",
        f"mkfs.ext4 -F -L var_ab {part6}",
        f"mkfs.ext4 -F -L home_ab {part7}",
    ]
    for cmd in format_commands:
        run_command(cmd)

    mount_dir = "/mnt/obsidian_install"
    run_command(f"mkdir -p {mount_dir}")
    print("Mounting root partition for slot 'a'...")
    run_command(f"mount /dev/disk/by-label/root_a {mount_dir}")
    print(f"Extracting system from {system_sfs} to slot 'a'...")
    run_command(f"unsquashfs -f -d {mount_dir} -no-xattrs {system_sfs}")
    print("Generating fstab for slot 'a'...")
    fstab_content_a = """
LABEL=root_a  /      ext4  defaults,noatime 0 1
LABEL=ESP_A     /boot  vfat  defaults,noatime 0 2
LABEL=etc_ab  /etc   ext4  defaults,noatime 0 2
LABEL=var_ab  /var   ext4  defaults,noatime 0 2
LABEL=home_ab /home  ext4  defaults,noatime 0 2
"""
    with open(f"{mount_dir}/etc/fstab", "w") as f:
        f.write(fstab_content_a.strip())

    print("Populating shared /etc, /var, and /home partitions...")
    for part_label in ["etc_ab", "var_ab", "home_ab"]:
        fs_dir = part_label.split("_")[0]
        tmp_mount_dir = f"/mnt/tmp_{fs_dir}"
        run_command(f"mkdir -p {tmp_mount_dir}")
        try:
            run_command(f"mount /dev/disk/by-label/{part_label} {tmp_mount_dir}")
            run_command(f"rsync -aK --delete {mount_dir}/{fs_dir}/ {tmp_mount_dir}/")
        finally:
            run_command(f"umount {tmp_mount_dir}", check=False)
            run_command(f"rmdir {tmp_mount_dir}", check=False)

    print("Populating ESP with boot files from system image...")
    esp_tmp_mount = "/mnt/obsidian_esp_tmp"
    run_command(f"mkdir -p {esp_tmp_mount}")
    try:
        run_command(f"mount /dev/disk/by-label/ESP_A {esp_tmp_mount}")
        run_command(f"rsync -aK --delete {mount_dir}/boot/ {esp_tmp_mount}/")
    finally:
        run_command(f"umount {esp_tmp_mount}", check=False)
        run_command(f"rmdir {esp_tmp_mount}", check=False)

    print("Populating ESP_B with boot files from system image...")
    esp_b_tmp_mount = "/mnt/obsidian_esp_b_tmp"
    run_command(f"mkdir -p {esp_b_tmp_mount}")
    try:
        run_command(f"mount /dev/disk/by-label/ESP_B {esp_b_tmp_mount}")
        run_command(f"rsync -aK --delete {mount_dir}/boot/ {esp_b_tmp_mount}/")
    finally:
        run_command(f"umount {esp_b_tmp_mount}", check=False)
        run_command(f"rmdir {esp_b_tmp_mount}", check=False)

    print("Mounting shared partitions for potential chroot...")
    mount_commands = [
        f"mkdir -p {mount_dir}/boot",
        f"mkdir -p {mount_dir}/etc",
        f"mkdir -p {mount_dir}/var",
        f"mkdir -p {mount_dir}/home",
        f"mount /dev/disk/by-label/ESP_A {mount_dir}/boot",
        f"mount /dev/disk/by-label/etc_ab {mount_dir}/etc",
        f"mount /dev/disk/by-label/var_ab {mount_dir}/var",
        f"mount /dev/disk/by-label/home_ab {mount_dir}/home",
    ]
    for cmd in mount_commands:
        run_command(cmd)

    print("Copying support files to slot 'a'...")
    script_path = os.path.realpath(sys.argv[0])
    os_release_path = "/etc/os-release"
    obsidianctl_dest = f"{mount_dir}/usr/bin/obsidianctl"
    run_command(f"mkdir -p {mount_dir}/usr/bin")
    run_command(f"cp {script_path} {obsidianctl_dest}")
    run_command(f"chmod +x {obsidianctl_dest}")
    if os.path.exists(os_release_path):
        run_command(f"cp {os_release_path} {mount_dir}/etc/os-release")
    else:
        print(
            f"Warning: os-release file not found at {os_release_path}. Skipping.",
            file=sys.stderr,
        )

    print("\nSlot 'a' is now configured and mounted.")
    chroot_confirm = input(
        "Do you want to chroot into slot 'a' to make changes before copying it to slot B? (y/N): "
    )
    if chroot_confirm.lower() == "y":
        print(f"Entering chroot environment in {mount_dir}...")
        print(
            "Common tasks: passwd, ln -sf /usr/share/zoneinfo/Region/City /etc/localtime, useradd"
        )
        print("Type 'exit' or press Ctrl+D when you are finished.")
        run_command(f"arch-chroot {mount_dir}", check=False)
        print("Exited chroot.")

    print("Unmounting slot 'a' partitions before copy...")
    run_command(f"umount -R {mount_dir}")
    print("Copying system to slot 'b'...")
    run_command(f"dd if={part3} of={part4} bs=16M status=progress")
    run_command(f"e2label {part4} root_b")
    print("Correcting fstab for slot 'b'...")
    mount_b_dir = "/mnt/obsidian_install_b"
    run_command(f"mkdir -p {mount_b_dir}")
    try:
        run_command(f"mount {part4} {mount_b_dir}")
        fstab_b_path = f"{mount_b_dir}/etc/fstab"
        if not os.path.exists(os.path.dirname(fstab_b_path)):
            run_command(f"mkdir -p {os.path.dirname(fstab_b_path)}")
        fstab_content_b = fstab_content_a.replace(
            "LABEL=root_a", "LABEL=root_b"
        ).replace("LABEL=ESP_A", "LABEL=ESP_B")
        with open(fstab_b_path, "w") as f:
            f.write(fstab_content_b)
    finally:
        run_command(f"umount {mount_b_dir}", check=False)
        run_command(f"rm -r {mount_b_dir}")

    print("Installing systemd-boot to ESP_A...")
    esp_a_mount_dir = "/mnt/obsidian_esp_a"
    run_command(f"mkdir -p {esp_a_mount_dir}")
    try:
        run_command(f"mount {part1} {esp_a_mount_dir}")
        run_command(f"bootctl --esp-path={esp_a_mount_dir} install")
    finally:
        run_command(f"umount {esp_a_mount_dir}", check=False)
        run_command(f"rm -r {esp_a_mount_dir}", check=False)

    print("Installing systemd-boot to ESP_B...")
    esp_b_mount_dir = "/mnt/obsidian_esp_b"
    run_command(f"mkdir -p {esp_b_mount_dir}")
    try:
        run_command(f"mount {part2} {esp_b_mount_dir}")
        run_command(f"bootctl --esp-path={esp_b_mount_dir} install")
    finally:
        run_command(f"umount {esp_b_mount_dir}", check=False)
        run_command(f"rm -r {esp_b_mount_dir}", check=False)

    root_a_partuuid = run_command(
        f"blkid -s PARTUUID -o value {part3}", capture_output=True, text=True
    ).stdout.strip()
    root_b_partuuid = run_command(
        f"blkid -s PARTUUID -o value {part4}", capture_output=True, text=True
    ).stdout.strip()
    if not root_a_partuuid or not root_b_partuuid:
        print(
            "Could not determine PARTUUIDs for root partitions. Cannot create boot entries.",
            file=sys.stderr,
        )
        sys.exit(1)

    loader_conf = """
timeout 0
default obsidian-a.conf
"""
    entry_a_conf = f"""
title ObsidianOS (Slot A)
linux /vmlinuz-linux
initrd /initramfs-linux.img
options root=PARTUUID={root_a_partuuid} rw
"""
    entry_b_conf = f"""
title ObsidianOS (Slot B)
linux /vmlinuz-linux
initrd /initramfs-linux.img
options root=PARTUUID={root_b_partuuid} rw
"""

    esp_a_config_mount_dir = "/mnt/obsidian_esp_a_config"
    run_command(f"mkdir -p {esp_a_config_mount_dir}")
    try:
        run_command(f"mount {part1} {esp_a_config_mount_dir}")
        run_command(f"mkdir -p {esp_a_config_mount_dir}/loader/entries")
        with open(f"{esp_a_config_mount_dir}/loader/loader.conf", "w") as f:
            f.write(loader_conf)
        with open(f"{esp_a_config_mount_dir}/loader/entries/obsidian-a.conf", "w") as f:
            f.write(entry_a_conf)
        with open(f"{esp_a_config_mount_dir}/loader/entries/obsidian-b.conf", "w") as f:
            f.write(entry_b_conf)
    finally:
        run_command(f"umount {esp_a_config_mount_dir}", check=False)
        run_command(f"rm -r {esp_a_config_mount_dir}", check=False)

    print("Writing boot configuration to ESP_B...")
    esp_b_config_mount_dir = "/mnt/obsidian_esp_b_config"
    run_command(f"mkdir -p {esp_b_config_mount_dir}")
    try:
        run_command(f"mount {part2} {esp_b_config_mount_dir}")
        run_command(f"mkdir -p {esp_b_config_mount_dir}/loader/entries")
        with open(f"{esp_b_config_mount_dir}/loader/loader.conf", "w") as f:
            f.write(loader_conf)
        with open(f"{esp_b_config_mount_dir}/loader/entries/obsidian-a.conf", "w") as f:
            f.write(entry_a_conf)
        with open(f"{esp_b_config_mount_dir}/loader/entries/obsidian-b.conf", "w") as f:
            f.write(entry_b_conf)
    finally:
        run_command(f"umount {esp_b_config_mount_dir}", check=False)
        run_command(f"rm -r {esp_b_config_mount_dir}", check=False)
    run_command(f"rm -r {mount_dir}", check=False)
    print("\nInstallation complete!")
    print("Default boot order will attempt Slot A, then Slot B.")
    print("Reboot your system to apply changes.")


def handle_switch(args):
    checkroot()
    slot = args.slot
    print(f"Switching active boot slot to '{slot}'...")
    esp_a_path = "/dev/disk/by-label/ESP_A"
    esp_b_path = "/dev/disk/by-label/ESP_B"
    if not os.path.exists(esp_a_path) or not os.path.exists(esp_b_path):
        print(
            "ESP partitions not found. Was the system installed with obsidianctl?",
            file=sys.stderr,
        )
        sys.exit(1)

    esp_mount_dir = "/mnt/obsidian_esp_tmp"
    run_command(f"mkdir -p {esp_mount_dir}")
    try:
        run_command(f"mount {esp_a_path} {esp_mount_dir}")
        run_command(
            f"bootctl --esp-path={esp_mount_dir} set-default obsidian-{slot}.conf"
        )
        print(f"Default boot entry set to obsidian-{slot}.conf on ESP_A.")
    finally:
        run_command(f"umount {esp_mount_dir}", check=False)

    try:
        run_command(f"mount {esp_b_path} {esp_mount_dir}")
        run_command(
            f"bootctl --esp-path={esp_mount_dir} set-default obsidian-{slot}.conf"
        )
        print(f"Default boot entry set to obsidian-{slot}.conf on ESP_B.")
    finally:
        run_command(f"umount {esp_mount_dir}", check=False)
        run_command(f"rm -r {esp_mount_dir}", check=False)

    print(f"Active boot slot switched to '{slot}'. The change is persistent.")
    
def handle_switchonce(args):
    checkroot()
    slot = args.slot
    print(f"Switching active boot slot to '{slot}' temporarily...")
    esp_a_path = "/dev/disk/by-label/ESP_A"
    esp_b_path = "/dev/disk/by-label/ESP_B"
    if not os.path.exists(esp_a_path) or not os.path.exists(esp_b_path):
        print(
            "ESP partitions not found. Was the system installed with obsidianctl?",
            file=sys.stderr,
        )
        sys.exit(1)

    esp_mount_dir = "/mnt/obsidian_esp_tmp"
    run_command(f"mkdir -p {esp_mount_dir}")
    try:
        run_command(f"mount {esp_a_path} {esp_mount_dir}")
        run_command(
            f"bootctl --esp-path={esp_mount_dir} set-oneshot obsidian-{slot}.conf"
        )
        print(f"Default boot entry set to obsidian-{slot}.conf on ESP_A.")
    finally:
        run_command(f"umount {esp_mount_dir}", check=False)

    try:
        run_command(f"mount {esp_b_path} {esp_mount_dir}")
        run_command(
            f"bootctl --esp-path={esp_mount_dir} set-oneshot obsidian-{slot}.conf"
        )
        print(f"Default boot entry set to obsidian-{slot}.conf on ESP_B.")
    finally:
        run_command(f"umount {esp_mount_dir}", check=False)
        run_command(f"rm -r {esp_mount_dir}", check=False)

    print(f"Active boot slot switched to '{slot}'. The change is temporarily.")


def handle_update(args):
    checkroot()
    slot = args.slot
    system_sfs = args.system_sfs
    if not os.path.exists(system_sfs):
        print(f"Error: System image '{system_sfs}' not found.", file=sys.stderr)
        sys.exit(1)

    target_label = f"root_{slot}"
    esp_label = f"ESP_{slot}"
    print(f"Updating slot '{slot}' with image '{system_sfs}'...")
    print(f"WARNING: THIS WILL ERASE ALL OF SLOT {slot.upper()}. INCLUDING /root.")
    confirm = input("Continue? (y/N): ")
    if confirm.lower() != "y":
        print("Operation Canceled.")
        exit(1)
    print("Formatting partition...")
    run_command(f"mkfs.ext4 -F -L {target_label} /dev/disk/by-label/{target_label}")
    mount_dir = f"/mnt/obsidian_update_{slot}"
    run_command(f"mkdir -p {mount_dir}")
    try:
        print(f"Mounting partition for slot '{slot}'...")
        run_command(f"mount /dev/disk/by-label/{target_label} {mount_dir}")
        print(f"Extracting system from {system_sfs} to slot '{slot}'...")
        run_command(f"unsquashfs -f -d {mount_dir} -no-xattrs {system_sfs}")
        print(f"Generating fstab for slot '{slot}'...")
        fstab_content = f"""
LABEL={target_label}  /      ext4  defaults,noatime 0 1
LABEL={esp_label}     /boot  vfat  defaults,noatime 0 2
LABEL=etc_ab  /etc   ext4  defaults,noatime 0 2
LABEL=var_ab  /var   ext4  defaults,noatime 0 2
LABEL=home_ab /home  ext4  defaults,noatime 0 2
"""
        fstab_path = f"{mount_dir}/etc/fstab"
        if not os.path.exists(os.path.dirname(fstab_path)):
            run_command(f"mkdir -p {os.path.dirname(fstab_path)}")

        with open(fstab_path, "w") as f:
            f.write(fstab_content.strip())
        print(f"Copying support files to slot '{slot}'...")
        script_path = os.path.realpath(sys.argv[0])
        obsidianctl_dest = f"{mount_dir}/usr/bin/obsidianctl"
        run_command(f"mkdir -p {mount_dir}/usr/bin")
        run_command(f"cp {script_path} {obsidianctl_dest}")
        run_command(f"chmod +x {obsidianctl_dest}")
        run_command(f"cp /etc/os-release {mount_dir}/etc/os-release")

        print(f"Populating ESP_{slot.upper()} with new boot files...")
        esp_tmp_mount = "/mnt/obsidian_esp_tmp"
        run_command(f"mkdir -p {esp_tmp_mount}")
        try:
            run_command(f"mount /dev/disk/by-label/ESP_{slot.upper()} {esp_tmp_mount}")
            run_command(f"rsync -aK --delete {mount_dir}/boot/ {esp_tmp_mount}/")
        finally:
            run_command(f"umount {esp_tmp_mount}", check=False)
            run_command(f"rmdir {esp_tmp_mount}", check=False)

    finally:
        print("Unmounting partition...")
        run_command(f"umount -R {mount_dir}", check=False)
        run_command(f"rm -r {mount_dir}", check=False)

    print(f"Update for slot '{slot}' complete!")
    print("You may need to switch to this slot and reboot to use the updated system.")


import os
import sys
import argparse
import subprocess
import shlex
import re

def main():
    parser = argparse.ArgumentParser(
        description="Install and manage A/B slot system with shared partitions on ObsidianOS.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    subparsers = parser.add_subparsers(dest="command", required=True)
    parser_status = subparsers.add_parser(
        "status", help="Show current active slot and system info."
    )
    parser_status.set_defaults(func=handle_status)

    parser_install = subparsers.add_parser(
        "install", help="Partition device and install system image."
    )
    parser_install.add_argument(
        "device", help="The target block device (e.g., /dev/sda)."
    )
    parser_install.add_argument("system_sfs", help="Path to the SquashFS system image.")
    parser_install.set_defaults(func=handle_install)
    parser_switchonce = subparsers.add_parser(
      "switch-once", help="Switch active boot slot to 'a' or 'b' once only."
    )
    parser_switchonce.add_argument(
      "slot", choices=["a", "b"], help="The slot to make active for once."
    )
    parser_switchonce.set_defaults(func=handle_switchonce)
    parser_switch = subparsers.add_parser(
        "switch", help="Switch active boot slot to 'a' or 'b'."
    )
    parser_switch.add_argument(
        "slot", choices=["a", "b"], help="The slot to make active."
    )
    parser_switch.set_defaults(func=handle_switch)

    parser_update = subparsers.add_parser(
        "update", help="Update a slot with a new system image."
    )
    parser_update.add_argument(
        "slot", choices=["a", "b"], help="The slot to update."
    )
    parser_update.add_argument(
        "system_sfs", help="Path to the new SquashFS system image."
    )
    parser_update.set_defaults(func=handle_update)

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()
    args.func(args)


main()
