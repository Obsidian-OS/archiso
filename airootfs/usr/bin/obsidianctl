#!/usr/bin/env python3
import argparse
import sys
import os
import subprocess
import shlex
import re

def run_command(command, capture_output=False, text=False, check=True, input=None):
    try:
        return subprocess.run(
            shlex.split(command),
            capture_output=capture_output,
            text=text,
            check=check,
            input=input,
        )
    except subprocess.CalledProcessError as e:
        print(f"Error executing command: {command}", file=sys.stderr)
        print(f"Stderr: {e.stderr}", file=sys.stderr)
        print(f"Stdout: {e.stdout}", file=sys.stderr)
        sys.exit(1)
    except FileNotFoundError:
        print(
            f"Error: Command not found. Is '{shlex.split(command)[0]}' in your PATH?",
            file=sys.stderr,
        )
        sys.exit(1)

def get_current_slot():
    """Determines the currently booted A/B slot."""
    try:
        with open("/proc/cmdline", "r") as f:
            cmdline = f.read()
    except FileNotFoundError:
        return "unknown (/proc/cmdline not found)"
    except Exception as e:
        return f"unknown (Error reading /proc/cmdline: {e})"

    root_param = next((arg for arg in cmdline.split() if arg.startswith("root=")), None)

    if not root_param:
        return "unknown (Could not determine root from /proc/cmdline)"

    root_value = root_param.split("=", 1)[1]
    label = None

    if root_value.startswith("LABEL="):
        label = root_value.split("=", 1)[1]
    elif root_value.startswith("PARTUUID="):
        partuuid = root_value.split("=", 1)[1]
        try:
            device_path = os.path.realpath(f"/dev/disk/by-partuuid/{partuuid}")
            if not os.path.exists(device_path):
                return f"unknown (Device for PARTUUID {partuuid} not found)"
            label_output = run_command(
                f"lsblk -no LABEL {device_path}", capture_output=True, text=True
            ).stdout.strip()
            if label_output:
                label = label_output
            else:
                return f"unknown (PARTUUID {partuuid} has no label)"
        except Exception as e:
            return f"unknown (Error mapping PARTUUID to label: {e})"
    elif root_value.startswith("UUID="):
        uuid = root_value.split("=", 1)[1]
        try:
            device_path = os.path.realpath(f"/dev/disk/by-uuid/{uuid}")
            if not os.path.exists(device_path):
                return f"unknown (Device for UUID {uuid} not found)"
            label_output = run_command(
                f"lsblk -no LABEL {device_path}", capture_output=True, text=True
            ).stdout.strip()
            if label_output:
                label = label_output
            else:
                return f"unknown (UUID {uuid} has no label)"
        except Exception as e:
            return f"unknown (Error mapping UUID to label: {e})"
    else:
        return f"unknown (Unsupported root type: {root_value})"

    if label == "root_a":
        return "a"
    elif label == "root_b":
        return "b"
    else:
        return f"unknown (Label: {label})"

def _get_part_path(device, num):
    """Gets the path for a partition, handling different device name schemes."""
    dev_prefix = "p" if "nvme" in device or "mmcblk" in device else ""
    return f"{device}{dev_prefix}{num}"


def handle_status(args):
    """Displays system status in a neofetch-like format."""

    logo = [
"   ooooooooooo   ",
" oo:::::::::::oo ",
"o:::::::::::::::o",
"o:::::ooooo:::::o",
"o::::o     o::::o",
"o::::o     o::::o",
"o::::o     o::::o",
"o::::o     o::::o",
"o:::::ooooo:::::o",
"o:::::::::::::::o",
" oo:::::::::::oo ",
"   ooooooooooo   "
]

    info = {}
    info["Active Slot"] = get_current_slot()
    info["Kernel"] = run_command("uname -r", capture_output=True, text=True).stdout.strip()
    info["Uptime"] = run_command("uptime -p", capture_output=True, text=True).stdout.strip().replace("up ", "")
    try:
        with open("/etc/os-release") as f:
            os_release = dict(line.strip().split("=", 1) for line in f if "=" in line)
        info["OS"] = os_release.get("PRETTY_NAME", "Linux").strip('"')
    except FileNotFoundError:
        info["OS"] = "Linux"

    info["Hostname"] = run_command("hostnamectl hostname", capture_output=True, text=True).stdout.strip()
    cpu_info = run_command("lscpu", capture_output=True, text=True).stdout
    cpu_model_match = re.search(r"Model name:\s+(.*)", cpu_info)
    if cpu_model_match:
        info["CPU"] = cpu_model_match.group(1).strip()

    mem_info = run_command("free -h", capture_output=True, text=True).stdout
    mem_line = mem_info.split("\n")[1]
    mem_parts = mem_line.split()
    if len(mem_parts) >= 3:
        info["Memory"] = f"{mem_parts[2]} / {mem_parts[1]}"


    max_logo_width = max(len(line) for line in logo)
    for i in range(max(len(logo), len(info))):
        logo_line = logo[i] if i < len(logo) else " " * max_logo_width
        if i < len(info):
            key, value = list(info.items())[i]
            info_line = f"\033[1m{key}\033[0m: {value}"
        else:
            info_line = ""

        print(f"\033[36m{logo_line}\033[0m  {info_line}")
    print("\n\033[1mPartition Information:\033[0m")
    run_command("lsblk -o NAME,LABEL,SIZE,MOUNTPOINT")

def handle_install(args):
    device = args.device
    system_sfs = args.system_sfs
    if not os.path.exists(device):
        print(f"Error: Device '{device}' does not exist.", file=sys.stderr)
        sys.exit(1)

    if not os.path.exists(system_sfs):
        print(f"Error: System image '{system_sfs}' not found.", file=sys.stderr)
        sys.exit(1)

    print(f"WARNING: This will destroy all data on {device}.")
    confirm = input("Are you sure you want to proceed? (y/N): ")
    if confirm.lower() != "y":
        print("Installation aborted.")
        sys.exit(0)
    print("Partitioning device...")
    partition_table = """
label: gpt
,512M,U,*
,512M,U,*
,5G,L,*
,5G,L,*
,5G,L,*
,5G,L,*
,,L,*
"""
    run_command(f"sfdisk {device}", input=partition_table, text=True)
    run_command("partprobe", check=False)
    print("Waiting for device partitions to settle...")
    run_command("udevadm settle")
    part1, part2, part3, part4, part5, part6, part7 = (
        _get_part_path(device, 1),
        _get_part_path(device, 2),
        _get_part_path(device, 3),
        _get_part_path(device, 4),
        _get_part_path(device, 5),
        _get_part_path(device, 6),
        _get_part_path(device, 7),
    )

    print("Formatting partitions...")
    format_commands = [
        f"mkfs.fat -F32 -n ESP_A {part1}",
        f"mkfs.fat -F32 -n ESP_B {part2}",
        f"mkfs.ext4 -F -L root_a {part3}",
        f"mkfs.ext4 -F -L root_b {part4}",
        f"mkfs.ext4 -F -L etc_ab {part5}",
        f"mkfs.ext4 -F -L var_ab {part6}",
        f"mkfs.ext4 -F -L home_ab {part7}",
    ]
    for cmd in format_commands:
        run_command(cmd)

    mount_dir = "/mnt/obsidian_install"
    run_command(f"mkdir -p {mount_dir}")
    print("Mounting root partition for slot 'a'...")
    run_command(f"mount /dev/disk/by-label/root_a {mount_dir}")
    print(f"Extracting system from {system_sfs} to slot 'a'...")
    run_command(f"unsquashfs -f -d {mount_dir} -no-xattrs {system_sfs}")
    print("Generating fstab for slot 'a'...")
    fstab_content_a = """
LABEL=root_a  /      ext4  defaults,noatime 0 1
LABEL=ESP_A     /boot  vfat  defaults,noatime 0 2
LABEL=etc_ab  /etc   ext4  defaults,noatime 0 2
LABEL=var_ab  /var   ext4  defaults,noatime 0 2
LABEL=home_ab /home  ext4  defaults,noatime 0 2
"""
    with open(f"{mount_dir}/etc/fstab", "w") as f:
        f.write(fstab_content_a.strip())

    print("Populating shared /etc and /var partitions...")
    for part_label in ["etc_ab", "var_ab"]:
        fs_dir = part_label.split("_")[0]
        tmp_mount_dir = f"/mnt/tmp_{fs_dir}"
        run_command(f"mkdir -p {tmp_mount_dir}")
        try:
            run_command(f"mount /dev/disk/by-label/{part_label} {tmp_mount_dir}")
            run_command(f"rsync -aK --delete {mount_dir}/{fs_dir}/ {tmp_mount_dir}/")
        finally:
            run_command(f"umount {tmp_mount_dir}", check=False)
            run_command(f"rmdir {tmp_mount_dir}", check=False)

    print("Populating ESP with boot files from system image...")
    esp_tmp_mount = "/mnt/obsidian_esp_tmp"
    run_command(f"mkdir -p {esp_tmp_mount}")
    try:
        run_command(f"mount /dev/disk/by-label/ESP_A {esp_tmp_mount}")
        run_command(f"rsync -aK --delete {mount_dir}/boot/ {esp_tmp_mount}/")
    finally:
        run_command(f"umount {esp_tmp_mount}", check=False)
        run_command(f"rmdir {esp_tmp_mount}", check=False)

    print("Mounting shared partitions for potential chroot...")
    mount_commands = [
        f"mkdir -p {mount_dir}/boot",
        f"mkdir -p {mount_dir}/etc",
        f"mkdir -p {mount_dir}/var",
        f"mkdir -p {mount_dir}/home",
        f"mount /dev/disk/by-label/ESP_A {mount_dir}/boot",
        f"mount /dev/disk/by-label/etc_ab {mount_dir}/etc",
        f"mount /dev/disk/by-label/var_ab {mount_dir}/var",
        f"mount /dev/disk/by-label/home_ab {mount_dir}/home",
    ]
    for cmd in mount_commands:
        run_command(cmd)

    print("Copying support files to slot 'a'...")
    script_path = os.path.realpath(sys.argv[0])
    os_release_path = "/etc/os-release"
    obsidianctl_dest = f"{mount_dir}/usr/bin/obsidianctl"
    run_command(f"mkdir -p {mount_dir}/usr/bin")
    run_command(f"cp {script_path} {obsidianctl_dest}")
    run_command(f"chmod +x {obsidianctl_dest}")
    if os.path.exists(os_release_path):
        run_command(f"cp {os_release_path} {mount_dir}/etc/os-release")
    else:
        print(
            f"Warning: os-release file not found at {os_release_path}. Skipping.",
            file=sys.stderr,
        )

    print("\nSlot 'a' is now configured and mounted.")
    chroot_confirm = input(
        "Do you want to chroot into slot 'a' to make changes before copying it to slot B? (y/N): "
    )
    if chroot_confirm.lower() == "y":
        print(f"Entering chroot environment in {mount_dir}...")
        print(
            "Common tasks: passwd, ln -sf /usr/share/zoneinfo/Region/City /etc/localtime, useradd"
        )
        print("Type 'exit' or press Ctrl+D when you are finished.")
        run_command(f"arch-chroot {mount_dir}", check=False)
        print("Exited chroot.")

    print("Unmounting slot 'a' partitions before copy...")
    run_command(f"umount -R {mount_dir}")
    print("Copying system to slot 'b'...")
    run_command(f"dd if={part2} of={part3} bs=16M status=progress")
    run_command(f"e2label {part3} root_b")
    print("Correcting fstab for slot 'b'...")
    mount_b_dir = "/mnt/obsidian_install_b"
    run_command(f"mkdir -p {mount_b_dir}")
    try:
        run_command(f"mount {part3} {mount_b_dir}")
        fstab_b_path = f"{mount_b_dir}/etc/fstab"
        if not os.path.exists(os.path.dirname(fstab_b_path)):
            run_command(f"mkdir -p {os.path.dirname(fstab_b_path)}")
        fstab_content_b = fstab_content_a.replace(
            "LABEL=root_a", "LABEL=root_b"
        ).replace("LABEL=ESP_A", "LABEL=ESP_B")
        with open(fstab_b_path, "w") as f:
            f.write(fstab_content_b)
    finally:
        run_command(f"umount {mount_b_dir}", check=False)
        run_command(f"rm -r {mount_b_dir}")

    print("Setting up bootloader entries...")
    esp_mount_dir = "/mnt/obsidian_esp_check"
    run_command(f"mkdir -p {esp_mount_dir}")
    try:
        run_command(f"mount {part1} {esp_mount_dir}")
        run_command(f"rsync -aK --delete {mount_dir}/boot/ {esp_mount_dir}/")
        run_command(f"umount {esp_mount_dir}", check=False)
        run_command(f"mount {part2} {esp_mount_dir}")
        kernel_path = f"{esp_mount_dir}/vmlinuz-linux"
        initramfs_path = f"{esp_mount_dir}/initramfs-linux.img"
        if not os.path.exists(kernel_path) or not os.path.exists(initramfs_path):
            print(
                f"Error: vmlinuz-linux or initramfs-linux.img not found on the ESP partition ({part1}).",
                file=sys.stderr,
            )
            print(
                "This likely means the system image used for installation did not contain a kernel in /boot.",
                file=sys.stderr,
            )
            sys.exit(1)
    finally:
        run_command(f"umount {esp_mount_dir}", check=False)
        run_command(f"rm -r {esp_mount_dir}", check=False)

    root_a_partuuid = run_command(
        f"blkid -s PARTUUID -o value {part3}", capture_output=True, text=True
    ).stdout.strip()
    root_b_partuuid = run_command(
        f"blkid -s PARTUUID -o value {part4}", capture_output=True, text=True
    ).stdout.strip()
    if not root_a_partuuid or not root_b_partuuid:
        print(
            "Could not determine PARTUUIDs for root partitions. Cannot create boot entries.",
            file=sys.stderr,
        )
        sys.exit(1)
    efibootmgr_commands = [
        f"efibootmgr --create --disk {device} --part 1 --label 'ObsidianOS (Slot A)' --loader '\\vmlinuz-linux' --unicode 'root=PARTUUID={root_a_partuuid} rw initrd=\\initramfs-linux.img'",
        f"efibootmgr --create --disk {device} --part 2 --label 'ObsidianOS (Slot B)' --loader '\\vmlinuz-linux' --unicode 'root=PARTUUID={root_b_partuuid} rw initrd=\\initramfs-linux.img'",
    ]
    for cmd in efibootmgr_commands:
        run_command(cmd)
    run_command(f"rm -r {mount_dir}", check=False)
    print("\nInstallation complete!")
    print("Default boot order will attempt Slot A, then Slot B.")
    print("Reboot your system to apply changes.")



def handle_switch(args):
    slot = args.slot
    print(f"Switching active boot slot to '{slot}'...")

    boot_entries_raw = run_command("efibootmgr", capture_output=True, text=True).stdout
    boot_order_match = re.search(r"^BootOrder: (.*)$", boot_entries_raw, re.MULTILINE)
    if not boot_order_match:
        print("Could not determine boot order from efibootmgr.", file=sys.stderr)
        sys.exit(1)
    current_order = boot_order_match.group(1).split(",")

    slot_a_match = re.search(
        r"^Boot([0-9A-F]{4})\*?.*ObsidianOS \(Slot A\)", boot_entries_raw, re.MULTILINE
    )
    slot_b_match = re.search(
        r"^Boot([0-9A-F]{4})\*?.*ObsidianOS \(Slot B\)", boot_entries_raw, re.MULTILINE
    )
    slot_a_entry = slot_a_match.group(1) if slot_a_match else None
    slot_b_entry = slot_b_match.group(1) if slot_b_match else None
    if not slot_a_entry or not slot_b_entry:
        print(
            "Could not find boot entries for Slot A and Slot B. Was the system installed with obsidianctl?",
            file=sys.stderr,
        )
        sys.exit(1)
    new_order = list(current_order)
    target_entry = slot_a_entry if slot == "a" else slot_b_entry
    other_entry = slot_b_entry if slot == "a" else slot_a_entry
    if target_entry in new_order:
        new_order.remove(target_entry)
    if other_entry in new_order:
        new_order.remove(other_entry)

    new_order.insert(0, target_entry)
    new_order.insert(1, other_entry)
    final_order_str = ",".join(new_order)
    run_command(f"efibootmgr --bootorder {final_order_str}")
    print("Boot order updated.")
    run_command(f"efibootmgr -n {target_entry}")
    print(f"Next boot set to Slot {slot.upper()}. The change is persistent.")

def handle_update(args):
    slot = args.slot
    system_sfs = args.system_sfs
    if not os.path.exists(system_sfs):
        print(f"Error: System image '{system_sfs}' not found.", file=sys.stderr)
        sys.exit(1)

    target_label = f"root_{slot}"
    esp_label = f"ESP_{slot}"
    print(f"Updating slot '{slot}' with image '{system_sfs}'...")
    print(f"WARNING: THIS WILL ERASE ALL OF SLOT {slot.upper()}. INCLUDING /root.")
    confirm = input("Continue? (y/N): ")
    if confirm.lower() != "y":
        print("Operation Canceled.")
        exit(1)
    print("Formatting partition...")
    run_command(f"mkfs.ext4 -F -L {target_label} /dev/disk/by-label/{target_label}")
    mount_dir = f"/mnt/obsidian_update_{slot}"
    run_command(f"mkdir -p {mount_dir}")
    try:
        print(f"Mounting partition for slot '{slot}'...")
        run_command(f"mount /dev/disk/by-label/{target_label} {mount_dir}")
        print(f"Extracting system from {system_sfs} to slot '{slot}'...")
        run_command(f"unsquashfs -f -d {mount_dir} -no-xattrs {system_sfs}")
        print(f"Generating fstab for slot '{slot}'...")
        fstab_content = f"""
LABEL={target_label}  /      ext4  defaults,noatime 0 1
LABEL={esp_label}     /boot  vfat  defaults,noatime 0 2
LABEL=etc_ab  /etc   ext4  defaults,noatime 0 2
LABEL=var_ab  /var   ext4  defaults,noatime 0 2
LABEL=home_ab /home  ext4  defaults,noatime 0 2
"""
        fstab_path = f"{mount_dir}/etc/fstab"
        if not os.path.exists(os.path.dirname(fstab_path)):
            run_command(f"mkdir -p {os.path.dirname(fstab_path)}")

        with open(fstab_path, "w") as f:
            f.write(fstab_content.strip())
        print(f"Copying support files to slot '{slot}'...")
        script_path = os.path.realpath(sys.argv[0])
        obsidianctl_dest = f"{mount_dir}/usr/bin/obsidianctl"
        run_command(f"mkdir -p {mount_dir}/usr/bin")
        run_command(f"cp {script_path} {obsidianctl_dest}")
        run_command(f"chmod +x {obsidianctl_dest}")
        run_command(f"cp /etc/os-release {mount_dir}/etc/os-release")

        print(f"Populating ESP_{slot.upper()} with new boot files...")
        esp_tmp_mount = "/mnt/obsidian_esp_tmp"
        run_command(f"mkdir -p {esp_tmp_mount}")
        try:
            run_command(f"mount /dev/disk/by-label/ESP_{slot.upper()} {esp_tmp_mount}")
            run_command(f"rsync -aK --delete {mount_dir}/boot/ {esp_tmp_mount}/")
        finally:
            run_command(f"umount {esp_tmp_mount}", check=False)
            run_command(f"rmdir {esp_tmp_mount}", check=False)

    finally:
        print("Unmounting partition...")
        run_command(f"umount -R {mount_dir}", check=False)
        run_command(f"rm -r {mount_dir}", check=False)

    print(f"Update for slot '{slot}' complete!")
    print("You may need to switch to this slot and reboot to use the updated system.")




def main():
    if os.geteuid() != 0:
        print("This script must be run as root.", file=sys.stderr)
        sys.exit(1)

    parser = argparse.ArgumentParser(
        description="Install and manage A/B slot system with shared partitions on ObsidianOS.",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    subparsers = parser.add_subparsers(dest="command", required=True)

    parser_status = subparsers.add_parser(
        "status", help="Show current active slot and system info."
    )
    parser_status.set_defaults(func=handle_status)

    parser_install = subparsers.add_parser(
        "install", help="Partition device and install system image."
    )
    parser_install.add_argument(
        "device", help="The target block device (e.g., /dev/sda)."
    )
    parser_install.add_argument("system_sfs", help="Path to the SquashFS system image.")
    parser_install.set_defaults(func=handle_install)

    parser_switch = subparsers.add_parser(
        "switch", help="Switch active boot slot to 'a' or 'b'."
    )
    parser_switch.add_argument(
        "slot", choices=["a", "b"], help="The slot to make active."
    )
    parser_switch.set_defaults(func=handle_switch)

    parser_update = subparsers.add_parser(
        "update", help="Update a slot with a new system image."
    )
    parser_update.add_argument(
        "slot", choices=["a", "b"], help="The slot to update."
    )
    parser_update.add_argument(
        "system_sfs", help="Path to the new SquashFS system image."
    )
    parser_update.set_defaults(func=handle_update)

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()
    args.func(args)


main()
